<!DOCTYPE html>
<html lang="de">
<head>
<meta charset="UTF-8">
<title>DSA4 Charakterbogen</title>
<script src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
<style>
body { font-family:sans-serif; margin:20px; }
input, button, select { margin:6px; }
.tabs { display:flex; margin-bottom:12px; }
.tab { padding:6px 12px; margin-right:6px; border:1px solid #ccc; border-radius:4px; cursor:pointer; }
.tab.active { background:#eee; font-weight:bold; }
.log { margin-top: 20px; padding:10px; border:1px solid #ccc; max-height:250px; overflow-y:auto; background:#f9f9f9; }
.log-entry { border-bottom:1px solid #ddd; padding:6px 0; }
.controls { margin-top:8px; }
h4 { margin-bottom:4px; margin-top:12px; }
.dice-row { display:flex; gap:8px; margin-top:8px; }
.dice-wrapper { width:36px; height:36px; display:flex; align-items:center; justify-content:center; border:1px solid #ccc; border-radius:6px; background:#f6f6f6; font-weight:bold; }
.success { color:green; font-weight:bold; }
.failure { color:red; font-weight:bold; }
</style>
</head>
<body>
<div id="root"></div>
<script type="text/babel">

const { useState, useEffect } = React;
const ATTRS = ["MU","KL","IN","CH","FF","GE","KO","KK"];
const singleRollCategories = ["Kampftalente","Sprachen und Schriften","Liturgiekenntnis"];
const defaultSkills = {
  "Kampftalente":[
    {name:"Schwertkampf", attr:["GE","KK","FF"], value:10, spec:"Einhand", category:"Kampftalente"},
    {name:"Axtkampf", attr:["GE","KK","FF"], value:10, spec:"Zweihand", category:"Kampftalente"}
  ],
  "Körperliche Talente":[
    {name:"Klettern", attr:["KK","GE","KO"], value:10, spec:"", category:"Körperliche Talente"},
    {name:"Schwimmen", attr:["GE","KO","FF"], value:10, spec:"", category:"Körperliche Talente"}
  ],
  "Gesellschaftliche Talente":[
    {name:"Überreden", attr:["CH","IN","FF"], value:12, spec:"", category:"Gesellschaftliche Talente"},
    {name:"Etikette", attr:["CH","IN","MU"], value:10, spec:"", category:"Gesellschaftliche Talente"}
  ],
  "Natur-Talente":[
    {name:"Orientierung", attr:["IN","GE","FF"], value:10, spec:"", category:"Natur-Talente"},
    {name:"Tiere beobachten", attr:["IN","GE","FF"], value:10, spec:"", category:"Natur-Talente"}
  ],
  "Wissenstalente":[
    {name:"Geschichtswissen", attr:["KL","IN","FF"], value:10, spec:"", category:"Wissenstalente"},
    {name:"Arkanes Wissen", attr:["KL","IN","MU"], value:10, spec:"", category:"Wissenstalente"}
  ],
  "Sprachen und Schriften":[
    {name:"Götter/Kulte", attr:["KL"], value:10, spec:"", category:"Sprachen und Schriften"},
    {name:"Latein", attr:["KL"], value:10, spec:"", category:"Sprachen und Schriften"}
  ],
  "Handwerkstalente":[
    {name:"Schneidern", attr:["GE","IN","FF"], value:10, spec:"", category:"Handwerkstalente"},
    {name:"Schmieden", attr:["KK","GE","FF"], value:10, spec:"", category:"Handwerkstalente"}
  ]
};

function App(){
  const [characters,setCharacters]=useState({});
  const [currentChar,setCurrentChar]=useState(null);
  const [skills,setSkills]=useState([]);
  const [log,setLog]=useState([]);
  const [diceResults,setDiceResults]=useState([]);
  const [activeTab,setActiveTab]=useState("Eigenschaften");
  const [filterCategory,setFilterCategory]=useState("Alle");

  useEffect(()=>{
    const saved=localStorage.getItem("dsa_characters");
    if(saved){ const parsed=JSON.parse(saved); setCharacters(parsed); const first=Object.keys(parsed)[0]; if(first){ setCurrentChar(first); setSkills(parsed[first].skills||[]); } } 
    else setSkills(Object.values(defaultSkills).flat());
  },[]);

  function saveChars(newChars){ setCharacters(newChars); localStorage.setItem("dsa_characters",JSON.stringify(newChars)); }
  function newCharacter(){ const name=prompt("Neuer Charaktername:"); if(!name)return; if(characters[name]){alert("Name existiert bereits!"); return;} const attrs={}; ATTRS.forEach(a=>attrs[a]=12); const newChars={...characters,[name]:{attributes:attrs,skills:Object.values(defaultSkills).flat()}}; setCurrentChar(name); setSkills(newChars[name].skills); saveChars(newChars); }
  function deleteCharacter(){ if(!currentChar)return; if(!confirm(`Charakter "${currentChar}" löschen?`))return; const newChars={...characters}; delete newChars[currentChar]; const first=Object.keys(newChars)[0]||null; setCurrentChar(first); setSkills(first?newChars[first].skills:[]); saveChars(newChars);}
  function updateAttr(attr,value){ const updated={...characters,[currentChar]:{...characters[currentChar],attributes:{...characters[currentChar].attributes,[attr]:parseInt(value)||0}}}; saveChars(updated);}
  
  function rollD20(){ return Math.floor(Math.random()*20)+1; }
  function qualityLevel(tap){ if(tap<1)return 0; if(tap<=3)return 1; if(tap<=6)return 2; if(tap<=9)return 3; if(tap<=12)return 4; if(tap<=15)return 5; return 6; }
  function addToLog(entry){ setLog(prev=>[entry,...prev]); }

  function processRoll(skill,useSpec,rolls){
    const attrs = characters[currentChar]?.attributes || {};
    const ones=rolls.filter(r=>r===1).length;
    const twenties=rolls.filter(r=>r===20).length;

    let isCritical=false;
    let criticalText="";
    if(ones>=2){ isCritical=true; criticalText="✅ Kritischer Erfolg"; }
    if(twenties>=2){ isCritical=true; criticalText="❌ Kritischer Patzer"; }

    let taw = skill.value + (useSpec && skill.spec?2:0);
    let success=true;
    const rollDetails=[];
    skill.attr.forEach((a,i)=>{
      const roll = rolls[i]!==undefined ? rolls[i] : rolls[0];
      const val = attrs[a]||0;
      const diff = roll - val;
      if(diff>0) taw-=diff;
      if(taw<0) success=false;
      rollDetails.push(`${a}: geworfen ${roll} vs benötigt ${val} → ${diff<=0?"✔":"✘"}`);
    });
    let tap = success?taw:-1;
    let qs = success?qualityLevel(tap):0;

    addToLog({
      skill: skill.name+(useSpec&&skill.spec?" (Spez)":"")+" ["+skill.category+"]",
      rolls: rolls,
      result: isCritical?criticalText:(success?`✅ Erfolg (TaP*: ${tap}, QS: ${qs})`:`❌ Misslungen (TaP*: ${tap})`),
      details: rollDetails
    });
  }

  function rollSkill(skill,useSpec){
    const numDice = singleRollCategories.includes(skill.category)?1:skill.attr.length;
    const rolls = Array.from({length:numDice},()=>rollD20());
    setDiceResults(rolls.slice());
    processRoll(skill,useSpec,rolls);
  }

  function rollAttribute(attr){
    const val = characters[currentChar]?.attributes[attr] || 0;
    const roll = rollD20();
    const success = roll <= val;
    const critical = roll===1 ? "✅ Kritischer Erfolg" : roll===20 ? "❌ Kritischer Patzer" : null;
    setDiceResults([roll]);
    addToLog({
      skill: `Eigenschaft: ${attr}`,
      rolls: [roll],
      result: critical || (success?`✅ Erfolg (≤ ${val})`:`❌ Misslungen (≤ ${val})`),
      details: [`geworfen ${roll} vs benötigt ${val} → ${success?"✔":"✘"}`]
    });
  }

  function exportAll(){ const blob=new Blob([JSON.stringify(characters,null,2)],{type:"application/json"}); const url=URL.createObjectURL(blob); const a=document.createElement("a"); a.href=url; a.download="dsa_characters.json"; a.click(); URL.revokeObjectURL(url);}
  function importJSON(e){ const file=e.target.files[0]; if(!file)return; const reader=new FileReader(); reader.onload=ev=>{ try{ const data=JSON.parse(ev.target.result); setCharacters(data); const first=Object.keys(data)[0]; setCurrentChar(first); setSkills(first?data[first].skills:[]); saveChars(data); alert("Import erfolgreich!"); }catch(err){alert("Ungültige JSON");}}; reader.readAsText(file);}

  if(!currentChar) return <div><button onClick={newCharacter}>Neuer Charakter</button></div>;

  const groupedSkills = {};
  skills.forEach(skill => { const cat = skill.category || "Allgemein"; if(!groupedSkills[cat]) groupedSkills[cat]=[]; groupedSkills[cat].push(skill); });
  const skillCategories = ["Alle", ...Object.keys(groupedSkills)];
  const displayedSkills = filterCategory==="Alle" ? skills : groupedSkills[filterCategory] || [];

  return (
    <div>
      <h2>Charakter: {currentChar}</h2>
      <div className="controls">
        <button onClick={newCharacter}>+ Neu</button>
        <button onClick={deleteCharacter}>Löschen</button>
      </div>

      <div className="tabs">
        <div className={"tab "+(activeTab==="Eigenschaften"?"active":"")} onClick={()=>setActiveTab("Eigenschaften")}>Eigenschaften</div>
        <div className={"tab "+(activeTab==="Talente"?"active":"")} onClick={()=>setActiveTab("Talente")}>Talente</div>
        <div className={"tab "+(activeTab==="Würfellog"?"active":"")} onClick={()=>setActiveTab("Würfellog")}>Würfellog</div>
      </div>

      {activeTab==="Eigenschaften" && (
        <div>
          {ATTRS.map(a=>(
            <div key={a}>
              {a}: <input type="number" value={characters[currentChar].attributes[a]||0} onChange={e=>updateAttr(a,e.target.value)} style={{width:60}} />
              <button onClick={()=>rollAttribute(a)}>Würfeln</button>
            </div>
          ))}
          <h4>Letzter Würfelwurf:</h4>
          <div className="dice-row">
            {diceResults.map((d,i)=><div key={i} className="dice-wrapper">{d}</div>)}
            {diceResults.length===0 && <div>Keine Würfe bisher</div>}
          </div>
        </div>
      )}

      {activeTab==="Talente" && (
        <div>
          <label>Filter nach Kategorie: </label>
          <select value={filterCategory} onChange={e=>setFilterCategory(e.target.value)}>
            {skillCategories.map(cat=><option key={cat} value={cat}>{cat}</option>)}
          </select>

          {displayedSkills.map((skill,idx)=>(
            <div key={idx} style={{marginTop:"8px"}}>
              <strong>{skill.name}</strong> [{skill.attr.join("/")}] 
              TaW: <input type="number" value={skill.value} style={{width:50}}
                onChange={e=>{
                  const newSkills = [...skills];
                  newSkills[skills.indexOf(skill)].value = parseInt(e.target.value) || 0;
                  setSkills(newSkills);
                  const updatedChars = {...characters};
                  updatedChars[currentChar].skills = newSkills;
                  localStorage.setItem("dsa_characters", JSON.stringify(updatedChars));
                }} />
              {skill.spec?`(Spez: ${skill.spec})`:''} [{skill.category}]
              <div style={{marginTop:4}}>
                <button onClick={()=>rollSkill(skill,false)}>Würfeln</button>
                {skill.spec && <button onClick={()=>rollSkill(skill,true)}>Würfeln (Spez)</button>}
              </div>
            </div>
          ))}

          <h4>Letzter Würfelwurf:</h4>
          <div className="dice-row">
            {diceResults.map((d,i)=><div key={i} className="dice-wrapper">{d}</div>)}
            {diceResults.length===0 && <div>Keine Würfe bisher</div>}
          </div>
        </div>
      )}

      {activeTab==="Würfellog" && (
        <div className="log">
          {log.length===0 && <div>Noch keine Würfe</div>}
          {log.map((entry,idx)=>(
            <div key={idx} className="log-entry">
              <strong>{entry.skill}</strong> – Würfe: {entry.rolls.join(", ")}<br/>
              Ergebnis: <span className={entry.result.includes("❌")?"failure":"success"}>{entry.result}</span><br/>
              {entry.details && entry.details.map((d,i)=><div key={i} style={{fontSize:"0.9em", marginLeft:"10px"}}>{d}</div>)}
            </div>
          ))}
        </div>
      )}

      <h3>Import / Export</h3>
      <button onClick={exportAll}>Exportieren</button>
      <input type="file" accept="application/json" onChange={importJSON} />
    </div>
  );
}

ReactDOM.createRoot(document.getElementById("root")).render(<App />);
</script>
</body>
</html>
